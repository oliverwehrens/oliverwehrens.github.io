<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TDD PairProgramming on Oliver Wehrens</title>
    <link>https://owehrens.com/categories/tdd-pairprogramming/</link>
    <description>Recent content in TDD PairProgramming on Oliver Wehrens</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Sep 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://owehrens.com/categories/tdd-pairprogramming/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How pair programming can help you to get into Test Driven Development</title>
      <link>https://owehrens.com/how-pair-programming-can-help-you-to-get-into-test-driven-development/</link>
      <pubDate>Sun, 13 Sep 2009 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/how-pair-programming-can-help-you-to-get-into-test-driven-development/</guid>
      <description>At my current job management buys into Test driven development. It slowly starts to become our primary development style.&#xA;&#xA;Some &lt;strong&gt;advantages&lt;/strong&gt; of TDD for me are:&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Focus on problem solution&lt;/li&gt;&#xA;&lt;li&gt;No unnecessary development for use cases dreamed up by the developer&lt;/li&gt;&#xA;&lt;li&gt;Always make sure your code fulfills the requirements (tests)&lt;/li&gt;&#xA;&lt;li&gt;If you have tests you can safely refactor your code at any time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;Even though we all knew about the advantages of TDD, we figured out that we do &lt;strong&gt;not always write tests first&lt;/strong&gt;. While this might me acceptable in some situations like UI tests, most of the time it is not desired.&#xA;After seeing that problem for a couple of weeks (and always wondering how I did not write test first) all of the sudden I realized why sometimes it was easier to develop code with writing tests first and sometimes I just simply did not thought about it and had to write the tests later.&#xA;&#xA;&lt;strong&gt;It&#39;s simply because of pair programming&lt;/strong&gt;.&#xA;&#xA;What certainly happens to me  when coding alone, is that  sometimes I get into &#39;crunch&#39; mode too fast. With a second person to slow me down, we are discussing the problem and make sure we both have the same understanding of  what we are trying to achieve. During this process it is much clearer what needs to be done and what the goals are. This is a very important step. If I&#39;m all by myself, I start writing down some classes, look at methods and I&#39;m already thinking in code and not about the problem. Once you &lt;strong&gt;know what the real problem is&lt;/strong&gt;, it is very easy to start writing your tests first. It helped me a lot.&#xA;&#xA;Where pairing also helps is to &lt;strong&gt;focus&lt;/strong&gt; both programmers &lt;strong&gt;to stay in TDD mode&lt;/strong&gt;. Once the driver of the pair programming couple starts to hack away code, the other will remind him to write the tests first. This is a very valuable.&#xA;&#xA;After a while I got better at test driven development, even programming alone.&#xA;&#xA;So if you recognize that you do not write tests first (but you want to) and you yet again don&#39;t know how that happened, try pair programming. You learn how to start  with TDD (and get used to it)  and get all the benefits of pair programming as well.</description>
    </item>
  </channel>
</rss>
