<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Oliver Wehrens</title>
    <link>https://owehrens.com/tags/architecture/</link>
    <description>Recent content in Architecture on Oliver Wehrens</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://owehrens.com/tags/architecture/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Pivotal Role of Tech Leadership in Overseeing the Big Picture</title>
      <link>https://owehrens.com/the-pivotal-role-of-tech-leadership-in-overseeing-the-bigpicture/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/the-pivotal-role-of-tech-leadership-in-overseeing-the-bigpicture/</guid>
      <description>&lt;p&gt;The role of an individual overseeing the big picture is pivotal for a company. This role could be filled by a developer, an architect, a Head of Engineering, or a CTO. Depending on the size of the company, it’s not necessary to manage every detail personally, but it is crucial to ensure that essential tasks are completed and that you maintain a comprehensive overview of all operations.&lt;/p&gt;&#xA;&lt;p&gt;What are the main responsibilities in that role?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why you need a macro architecture</title>
      <link>https://owehrens.com/why-you-need-a-macro-architecture/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/why-you-need-a-macro-architecture/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ewolff.com&#34;&gt;Eberhard Wolff&lt;/a&gt; on &lt;a href=&#34;https://www.linkedin.com/in/eberhardwolff/&#34;&gt;LinkedIn&lt;/a&gt; asked recently: &amp;lsquo;What was the biggest mistake you witnessed or did?&amp;rsquo; (in software architecture).&lt;/p&gt;&#xA;&lt;p&gt;The one thing which came to my mind is that at one point we did not have a shared understanding how we should build our system back when I was working at DHL E-POST. This was in ~ 2014. We split the monolith in multiple services. Every team (we had 10 teams) was doing it how they thought it would be good. Turns out the overall system was harder to use, full of surprises in the APIs (REST) and had different concepts when operating. Documentation was hard to find and different stakeholders had different ideas how things should be done.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What does it take to become a software architect?</title>
      <link>https://owehrens.com/what-does-it-take-to-become-a-software-architekt/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/what-does-it-take-to-become-a-software-architekt/</guid>
      <description>&lt;p&gt;I got together with &lt;a href=&#34;https://ewolff.com/&#34;&gt;Eberhard Wolff&lt;/a&gt; to discuss and answer questions about what it takes to become a Software Architekt on &lt;a href=&#34;https://software-architektur.tv/2021/07/23/folge68.html&#34;&gt;Software Architektur TV&lt;/a&gt;. He was asked by several people what kind of skills a software architect needs, how a recruitment process might look or what kind of advice he could give to students to become an architect. So we got together and talked about it with live questions from the audience.&#xA;The interview got recorded on &lt;a href=&#34;https://www.youtube.com/watch?v=f-aJogqqk6M&#34;&gt;YouTube&lt;/a&gt;, Twitch, and Podcast (in German).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Technical Agility</title>
      <link>https://owehrens.com/technical-agility/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/technical-agility/</guid>
      <description>&lt;p&gt;I was giving a talk at an internal event of a consulting firm on Technical Agility. Here are my experiences and ideas on that topic.&lt;/p&gt;&#xA;&lt;p&gt;I will touch on&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What&lt;/li&gt;&#xA;&lt;li&gt;Why&lt;/li&gt;&#xA;&lt;li&gt;Where&lt;/li&gt;&#xA;&lt;li&gt;How ( &amp;amp; How to measure)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I will only touch on technical aspects of this topic. There is so much more to it like organization, team structure, culture and trust.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;arc.png&#34; alt=&#34;Arc&#34; title=&#34;Changes&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The ability to react to changes is the reason I want to have Technical Agility. Pretty generic. But this is what the term says. Everybody can react to changes it is just a matter of time. So let&amp;rsquo;s assume that you want to &amp;lsquo;React to changes fast&amp;rsquo;. How to define fast is up to you and of course, very use case-specific.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CD und DevOps im Expertencheck</title>
      <link>https://owehrens.com/cd-und-devops-im-expertencheck/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/cd-und-devops-im-expertencheck/</guid>
      <description>&lt;p&gt;Grau ist alle Theorie. Wir haben daher verschiedene Experten zum Thema Continuous Delivery und DevOps befragt – wir wollten wissen, wie ihre Erfahrungen mit den eigenen Teams und Unternehmen verlaufen sind. Oft stellte sich heraus, dass die Technik an sich nicht das größte Problem ist.&#39;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://entwickler.de/devops/cd-und-devops-im-expertencheck&#34;&gt;&lt;img src=&#34;javamagazin.png&#34; alt=&#34;CD/DevOps&#34; title=&#34;CD und DevOps im Expertencheck&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Warum wir auf DevOps setzen</title>
      <link>https://owehrens.com/warum-wir-auf-devops-setzen/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/warum-wir-auf-devops-setzen/</guid>
      <description>&lt;p&gt;Die Konkurrenz ist groß, jeder will beim Ausliefern der Software der schnellste sein. Warum wir dabei auf DevOps setzen? Das sind die Argumente.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://entwickler.de/devops/warum-wir-auf-devops-setzen&#34;&gt;&lt;img src=&#34;javamagazin.png&#34; alt=&#34;Warum wir auf DevOps setzen&#34; title=&#34;Warum wir auf DevOps setzen&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Service Discovery For Machines And Humans</title>
      <link>https://owehrens.com/service-discovery-for-machines-and-humans/</link>
      <pubDate>Wed, 01 Feb 2017 20:54:58 +0100</pubDate>
      <guid>https://owehrens.com/service-discovery-for-machines-and-humans/</guid>
      <description>&lt;p&gt;My slides from the OOP 2017 conference.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Abstract:&#xA;&#xA;&#xA;&#xA;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5c80e29228d147f9891b7918f6a3a021&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Combining Continuous Deployment and a Microservice architecture brings new challenges to develop and operate your platform. A service discovery enables you to build a flexible system. Developers need to have an up to date view on the deployed services as well. A human readable registry with relevant information is needed.&#xA;I will outline what we solved with a Service Registry and what impact it had on our architecture. Furthermore I will show what we needed to give our developers to get an up to date view on the whole platform.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microservices bei der E-POST</title>
      <link>https://owehrens.com/microservices-bei-der-e-post/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/microservices-bei-der-e-post/</guid>
      <description>&lt;p&gt;Microservices sind in aller Munde, und auf Konferenzen versprechen Migrationsszenarien und technische Details gut besuchte Vorträge. Eine Folie, die fast immer auftaucht, ist eine Feststellung von Melvin Conway aus dem Jahr 1968, die besagt, dass „Organisationen, die Systeme entwerfen, […] auf Entwürfe festgelegt sind, welche die Kommunikationsstrukturen dieser Organisationen abbilden.“ (Conways Law). Das heißt konkret, dass sich die Organisation der Firma und der Teams ­direkt auf den Code und die Architektur auswirkt.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Der Real-Life-Check</title>
      <link>https://owehrens.com/der-real-life-check/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/der-real-life-check/</guid>
      <description>&lt;p&gt;Über Microservices wird momentan viel in Theorie geschrieben und gesprochen. Doch wie sieht es in der wahren Welt dort draußen aus? Wir haben die Autoren dieses Themenschwerpunkts und weitere Experten aus der Branche gefragt, wie ihre Microservices-Erfahrungen aus der Praxis sind.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://entwickler.de/microservices/der-real-life-check-001&#34;&gt;&lt;img src=&#34;javamagazin.png&#34; alt=&#34;Der Real-Life-Check&#34; title=&#34;Der Real-Life-Check&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How is your microservice architecture doing?</title>
      <link>https://owehrens.com/how-is-your-microservice-architecture-doing/</link>
      <pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/how-is-your-microservice-architecture-doing/</guid>
      <description>&lt;p&gt;It all started when my new boss stepped into my door and asked me if I had a clue how our system was working. In an &lt;strong&gt;ideal world&lt;/strong&gt; we would have teams and developers who work on a isolated context with clear boundaries. They develop, test, deploy, monitor and operate everything by themselves. They are on 24/7 call and therefore they do everything possible that nothing fails. The system is stable and brings in the money.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Entwicklung verteilter Systeme - Herausforderungen nicht nur an die Architektur</title>
      <link>https://owehrens.com/entwicklung-verteilter-systeme-herausforderungen-nicht-nur-an-die-architektur/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/entwicklung-verteilter-systeme-herausforderungen-nicht-nur-an-die-architektur/</guid>
      <description>&lt;p&gt;This is my talk about &lt;strong&gt;Development of distributed systems - challenges not only for the architecture&lt;/strong&gt;.&#xA;&#xA;&#xA; You guessed it, it is in german. I gave this talk at &lt;a href=&#34;http://bed-con.org/2015/talks/Entwicklung-verteilter-Systeme---Herausforderungen-nicht-nur-an-die-Architektur&#34;&gt;BedCon 2015&lt;/a&gt; and I will talk about it again at the &lt;a href=&#34;http://www.the-architecture-gathering.de/indexEN.php&#34;&gt;Architecture Gathering 2015&lt;/a&gt; in Munich on October 22nd.&#xA;&#xA;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;af49bc1ea74b4fefaeaa3636c69542cd&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Abstract:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Jede Platform wächst mit der Zeit. Mehr Entwickler mit noch mehr Ideen und Vorstellungen arbeiten alle gemeinsam an der Weiterentwicklung. Das System wird größer und auf viele Systeme verteilt. Häufig wird ein Technologie Stack vorgegeben, um es vermeintlich wartbarer und stabiler zu machen. Zusätzlich wird die Software oft dabei von Entwicklung zu QA weitergereicht und am Schluss von Operations deployed und betrieben. Das Ergebnis davon sind lange Releasezyklen und das verschenkte Potenzial, weil nicht die richtigen Tools genutzt werden konnten.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrating a monolith</title>
      <link>https://owehrens.com/migrating-a-monolith/</link>
      <pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/migrating-a-monolith/</guid>
      <description>&lt;p&gt;If you start, a monolith is much easier to begin with. Everything is in one place, it&amp;rsquo;s fast and all team members understand the code.&#xA;If you plan your application from the start as distributed system in a microservice like style, you add some significant overhead. Don&amp;rsquo;t do it, &lt;a href=&#34;https://owehrens.com/a-monolith-could-be-good-for-you/&#34;&gt;monoliths have their advantages&lt;/a&gt; at some point. If another team start with the same project or more functionality is added, splitting up the monolith might be a way to go. Looking at ways to migrate, you maybe can do some better  design decision to for you monolith.&lt;/p&gt;</description>
    </item>
    <item>
      <title>If you don&#39;t fight it you end up with a monolith</title>
      <link>https://owehrens.com/if-you-dont-fight-it-you-end-up-with-a-monolith/</link>
      <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/if-you-dont-fight-it-you-end-up-with-a-monolith/</guid>
      <description>&lt;p&gt;You planned your software. You talked to your business owners. As soon as you saw a new use case which should be implemented, you modularized it. You did everything right. And then you hit the integration layer. Sounds familiar?&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;At some point in your project you need to integrate all modules with each other. In case of a website you need to produce HTML.&lt;/p&gt;&#xA;&lt;p&gt;There are different approaches how to tackle this problem. You can integrate it on the server side, grabbing all ui code from the affected systems and pack it together or you can integrate it in the browser.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Monolith could be good for you</title>
      <link>https://owehrens.com/a-monolith-could-be-good-for-you/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/a-monolith-could-be-good-for-you/</guid>
      <description>&lt;p&gt;Everybody says monolithic applications are bad. I usually hear things like:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tiny changes need full redeployment (maybe even with downtime)&lt;/li&gt;&#xA;&lt;li&gt;Limited agility&lt;/li&gt;&#xA;&lt;li&gt;Easy to get a big ball of mud&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So why would you like to have a monolith?&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://owehrens.com/static/monoliths.jpg&#34; alt=&#34;Monolith&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are many definitions of a monolithic application. There are tons  for microservices.&lt;/p&gt;&#xA;&lt;p&gt;A Monolith has it&amp;rsquo;s advantages. There are companies which are successful with monolithic applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How you might know that you have a monolith</title>
      <link>https://owehrens.com/how-you-might-know-that-you-have-a-monolith/</link>
      <pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/how-you-might-know-that-you-have-a-monolith/</guid>
      <description>&lt;p&gt;You start your green field project and keep working on it. It grows and grows and grows. You feel comfortable with it and it could not be better. Because more needs to be done/the product is successful another team is added.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://owehrens.com/static/monolith150150.jpg&#34; alt=&#34;Monolith&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;If this &lt;strong&gt;new team starts&lt;/strong&gt; complaining that the setup if very complicated and they do take a lot of time to get started:&#xA;&lt;strong&gt;Listen carefully&lt;/strong&gt;. Of course everybody will complain if they get thrown into another code base, nobody understands the code and of course everybody would have it done differently.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mit Puppet und RPM</title>
      <link>https://owehrens.com/mit-puppet-und-rpm/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/mit-puppet-und-rpm/</guid>
      <description>&lt;p&gt;„It works on my machine“ hat sicher jeder schon einmal gehört. In der Entwicklung verhält sich die Software wie erwartet. Bis diese in der Produktion ist, dauert es lange. Einmal live, treten dann unerwartete Fehler auf, während die Softwareentwicklung längst an einer ganz anderen Stelle ist. Wie kann dieser Spagat umgangen werden? Dieser Artikel reflektiert, wie wir mit diesem Problem auf Basis einer paketorientierten Deployment Pipeline umgehen.&#xA;&lt;a href=&#34;https://entwickler.de/microservices/der-real-life-check-001&#34;&gt;&lt;img src=&#34;javamagazin.png&#34; alt=&#34;Mit Puppet und RPM&#34; title=&#34;Mit Puppet und RPM&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Realtime Push Events zum Browser</title>
      <link>https://owehrens.com/realtime-push-events-zum-browser/</link>
      <pubDate>Tue, 01 May 2012 00:00:00 +0000</pubDate>
      <guid>https://owehrens.com/realtime-push-events-zum-browser/</guid>
      <description>&lt;p&gt;WebSockets sind in aller Munde, im Java Magazin sind sie nun sogar Titelthema. Aber es geht auch einfacher: Wer Echtzeit-Events zum Browser schicken will, kann es sich leicht machen. Dieser Artikel zeigt, wie.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://entwickler.de/java/realtime-push-events-zum-browser&#34;&gt;&lt;img src=&#34;javamagazin.png&#34; alt=&#34;PushEvents&#34; title=&#34;Realtime Push Events zum Browser&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
